#include<bits/stdc++.h>
#define ll long long
using namespace std;
class d_set{
  public:
    ll val;
    ll rank;
    ll size;
};
map<ll,class d_set> m;
void make_set(ll value)
{
    class d_set node;
    node.val=value;
    node.rank=0;
    node.size=1;
    m[value]=node;
}
class d_set find_parent(ll value)
{
    class d_set node=m[value];
    if(node.val==value)
        return node;
    else
        return node=find_parent(node.val);
}
void set_union(ll value1,ll value2)
{
    class d_set p1,p2;
    p1=find_parent(value1);
    p2=find_parent(value2);
    if(p1.val==p2.val)
        ;
    else{
    if(p1.rank>p2.rank)
    {
        p1.size=p1.size+p2.size;
        m[p1.val]=p1;
        m[p2.val]=p1;
        
    }
    else if(p1.rank<p2.rank)
    {
        p2.size=p2.size+p1.size;
        m[p2.val]=p2;
         m[p1.val]=p2;
    }
    else
    {
        p1.rank++;
        p1.size=p1.size+p2.size;
        m[p1.val]=p1;
        m[p2.val]=p1;
    }}
}
int main()
{
    int n,q;
    cin>>n>>q;
    for(int i=1;i<=n;++i)
        make_set(i);
    ll v1,v2;
    char ch;
    while(q--)
    {
        cin>>ch;
        if(ch=='M')
        {
            cin>>v1>>v2;
            set_union(v1,v2);
        }
        else{
            cin>>v1;
            class d_set node=find_parent(v1);
            cout<<node.size<<endl;
        }
    }
    
}