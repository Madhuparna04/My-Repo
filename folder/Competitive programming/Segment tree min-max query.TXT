#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#define ll long long
#define inf 100000000000000
using namespace std;
ll tree1[1000000],tree2[1000000],a[1000000];;
void build_tree(ll st,ll en,ll in)
{
    if(st==en)
    {
        tree1[in]=a[st];
        tree2[in]=a[st];
    }
    else{
        build_tree(st,(st+en)/2,2*in);
        build_tree((st+en)/2+1,en,2*in+1);
        tree1[in]=min(tree1[2*in],tree1[2*in+1]);
        tree2[in]=max(tree2[2*in],tree2[2*in+1]);
    }
}
ll query_min(ll l,ll r,ll st,ll en,ll in)
{
    if(en<l||st>r)
        return inf;
    if(st>=l&&en<=r)
    {
        return tree1[in];
    }
    return min(query_min(l,r,st,(st+en)/2,2*in),query_min(l,r,(st+en)/2+1,en,2*in+1));
}
ll query_max(ll l,ll r,ll st,ll en,ll in)
{
    if(en<l||st>r)
        return 0;
    if(st>=l&&en<=r)
    {
        return tree2[in];
    }
    return max(query_max(l,r,st,(st+en)/2,2*in),query_max(l,r,(st+en)/2+1,en,2*in+1));
}
int main() {
   int n,q;
    cin>>n;
  
   
    for(int i=1;i<=n;++i)
    {
       cin>>a[i];
    }
    build_tree(1,n,1);
   
    cin>>q;
   
    
    while(q--)
    {
        ll l,r,mn,mx;
        cin>>l>>r;
        if(l<=r)
        {
           cout<<query_max(l,r,1,n,1)-query_min(l,r,1,n,1)<<endl;
        }
        else{
            cout<<max(query_max(1,r,1,n,1),query_max(l,n,1,n,1))-min(query_min(1,r,1,n,1),query_min(l,n,1,n,1))<<endl;
        }
    }
}
